# -*- coding: utf-8 -*-
from __future__ import unicode_literals

"""
Django settings for lattes_service project.

Generated by 'django-admin startproject' using Django 1.11.21.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'heqh@@5@$lce#^&ww+b3)@k2$_7z++g=@_@6j46pt=0$05#4l2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.15.200', 'ls.home.br', 'localhost']


# Application definition
INSTALLED_APPS = [
    'api',
    'curriculo',
    'institucional',
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'django_crontab',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

### Necessário para que não precise utilize o app 'django.contrib.auth', que possui muitas tabelas
### que ficariam vazias no sistema, já que não há autenticação no sistema uma vez que o Apache
### foi configurado para filtrar os IP's dos clientes.
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [],
    'DEFAULT_PERMISSION_CLASSES': [],
    'UNAUTHENTICATED_USER': None,
    'DATETIME_FORMAT': '%d/%m/%Y',
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 200,
}

ROOT_URLCONF = 'lattes_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'lattes_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'lattes_service',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    },
    ### A seguir há um exemplo de configuração para o banco de dados institucional.
    ### Caso seu banco nao seja MySQL, verifique como configura-lo em https://docs.djangoproject.com/en/1.11/ref/settings/#databases.
    ### Recomenda-se que faça a configuração do sistema sem ativar estas configurações e,
    ### somente depois de certificar-se que o sistema esta funcionando, proceda
    ### com a configuraçao do seu banco institucional.
    #
    'institucional': {
       'ENGINE': 'django.db.backends.mysql',
       'NAME': 'unifesp',
       'USER': 'root',
       'PASSWORD': 'root',
       'HOST': 'localhost',
       'PORT': '3306',
    },

}

DEFAULT_CHARSET = 'utf-8'

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR,'static')

# Logging
# https://docs.djangoproject.com/pt-br/1.11/topics/logging/

LOG_DIR = os.path.join(BASE_DIR,'logs')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'file': {
            'format': '%(asctime)s - %(levelname)s - %(name)s:%(lineno)d - %(message)s',
            'datefmt': '%d/%m/%Y %H:%M:%S',
        },
        'console': {
            'format': '%(asctime)s - %(levelname)s - %(message)s',
            'datefmt': '%d/%m/%Y %H:%M:%S',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'file',
            'filename': os.path.join(LOG_DIR,'lattes_service.log'),
        },
    },
    'loggers': {
        'api': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'curriculo': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'institucional': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django_crontab.crontab':{
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        }
    },
}

### Cache no cliente
# Quando definido como True só entrega dados ao cliente após nova atualização dos dados com o scriptLattes.
# Desta forma, o cliente acaba sendo obrigado a manter um cache dos dados.
FORCAR_CACHE_NO_CLIENTE = True
PRAZO_DO_CACHE = 7 # prazo em dias. Atente-se ao período de execução dos CRONJOBS.

### ScriptLattes
COMPILAR_PRODUCAO = False # O processamento dos dados fica mais longo, porém boa parte das duplicidades são tratadas
ARQUIVO_DE_CONFIGURACAO_DIR = os.path.join(BASE_DIR,'scriptLattes')
ARQUIVO_DE_CONFIGURACAO_SCRIPT_LATTES = os.path.join(ARQUIVO_DE_CONFIGURACAO_DIR,'scriptLattes.config')
LISTA_DE_ORIENTADORES_SCRIPT_LATTES = os.path.join(ARQUIVO_DE_CONFIGURACAO_DIR,'scriptLattes.list')

### Configurando a execução automática do scriptLattes
CRONTAB_LOCK_JOBS = True
CRONTAB_COMMAND_PREFIX = 'LANG=pt_BR.UTF-8, LC_ALL=pt_BR.UTF-8, PYTHONIOENCODING=UTF-8'
#CRONTAB_COMMAND_SUFFIX = '2>&1' #Permite gravar os erros no arquivo de log. Ative somente para debugar
CRONJOBS_LOG_DIR = os.path.join(LOG_DIR,'cron')

CRONJOBS = [
    ### Descomente o job institucional.cron.gerar_arquivo_list_job apenas após configurar o database institucional

    #### Sugestão de agendamento
    ### Não é recomendo utilizar um intervalo recorrente (por exemplo, */5 - que significa a cada
    ### 5 minutos), pois a execução dos jobs poderá entrar em conflito uma com a outra.
    ### Utilize este tutorial para guiar-se https://www.hostinger.com.br/tutoriais/cron-job-guia/

    #### o job institucional.cron.gerar_arquivo_list_job rodará todas as segundas-feiras (1) às 8h00
    # ('0 8 * * 1', 'institucional.cron.gerar_arquivo_list_job', '>> ' + os.path.join(CRONJOBS_LOG_DIR, 'gerar_arquivo_list_job.log')),

    #### em seguida, o job curriculo.cron.persistir_job rodará todas as segundas-feiras (1) às 8h10
    # ('10 8 * * 1', 'curriculo.cron.persistir_job', '> ' + os.path.join(CRONJOBS_LOG_DIR, 'persistir_job_$(date +\%Y\%m\%d_\%H\%M\%S).log')),
]
